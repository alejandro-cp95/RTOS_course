
/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/

#include "stm32f30x.h"
#include "stm32f3xx_nucleo.h"
#include "stdint.h"

#include "FreeRTOS.h"
#include "task.h"
#include "string.h"

/*Definitions*/
#define FALSE 0
#define TRUE 1
#define NOT_PRESSED FALSE
#define PRESSED TRUE

/*Task functions prototypes*/
static void prvSetupHardware(void);
static void prvSetupUART(void);
static void prvSetupGPIO(void);
void printmsg(char* msg);
void button_handler(void* params);
void led_task_handler(void* params);

/*Global variables*/
uint8_t button_status_flag=NOT_PRESSED;

int main(void)
{
	DWT->CTRL |= (1<<0);/*Enable CYCCNT in DWT_CTRL*/
	/*1. Resets the RCC clock configuration to the default reset state.*/
	/*HSI ON, PLL OFF, HSE OFF, System clock = 8 MHz, CPU clock = 8 MHZ*/
	RCC_DeInit();
	/*2. Update SystemCoreClock variable according to Clock Register Values.*/
	SystemCoreClockUpdate();
	prvSetupHardware();
	/*Start Recording*/
	SEGGER_SYSVIEW_Conf();
	SEGGER_SYSVIEW_Start();
	/*3. Let's create 2 tasks: LED_TASK and BUTTON_TASK*/
	xTaskCreate(led_task_handler,"LED_TASK",configMINIMAL_STACK_SIZE,NULL,1,NULL);
	/*4. Start the scheduler*/
	vTaskStartScheduler();

	for(;;);
}

void led_task_handler(void* params)
{
	while(1)
	{
		if(button_status_flag==PRESSED)
		{
			/*Turn ON the LED*/
			GPIO_WriteBit(GPIOA,GPIO_Pin_5,Bit_SET);
		}
		else
		{
			/*Turn OFF the LED*/
			GPIO_WriteBit(GPIOA,GPIO_Pin_5,Bit_RESET);
		}
		taskYIELD();
	}
}

void button_handler(void* params)
{
	button_status_flag^=1;
}

static void prvSetupUART(void)
{
	GPIO_InitTypeDef gpio_uart_pins;
	USART_InitTypeDef uart2_init;
	/*1. Enable the UART2 and GPIOA peripheral clock*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
	/*PA2 is UART2_TX, PA3 is UART2_RX*/
	/*2. Alternate function configuration of MCU pins to behave as UART2 TX and RX*/
	gpio_uart_pins.GPIO_Pin=GPIO_Pin_2|GPIO_Pin_3;
	gpio_uart_pins.GPIO_Mode=GPIO_Mode_AF;
	gpio_uart_pins.GPIO_PuPd=GPIO_PuPd_UP;
	GPIO_Init(GPIOA, &gpio_uart_pins);
	/*3. AF mode settings for the pins*/
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_7);
	/*4. UART parameter initialization*/
	uart2_init.USART_BaudRate=115200;
	uart2_init.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
	uart2_init.USART_Mode=USART_Mode_Tx|USART_Mode_Rx;
	uart2_init.USART_Parity=USART_Parity_No;
	uart2_init.USART_StopBits=USART_StopBits_1;
	uart2_init.USART_WordLength=USART_WordLength_8b;
	USART_Init(USART2, &uart2_init);
	/*5. Enable the UART peripheral*/
	USART_Cmd(USART2, ENABLE);
}

static void prvSetupHardware(void)
{
	/*Setup UART2*/
	prvSetupUART();
	/*Setup LED and button*/
	prvSetupGPIO();
}

void printmsg(char* msg)
{
	for(uint32_t i=0;i<strlen(msg);i++)
	{
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)!=SET);
		USART_SendData(USART2, msg[i]);
	}
}

static void prvSetupGPIO(void)
{
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);

	GPIO_InitTypeDef gpio_led_pin, gpio_button_pin;
	gpio_led_pin.GPIO_Pin=GPIO_Pin_5;
	gpio_led_pin.GPIO_Mode=GPIO_Mode_OUT;
	gpio_led_pin.GPIO_OType=GPIO_OType_PP;
	gpio_led_pin.GPIO_PuPd=GPIO_PuPd_NOPULL;
	gpio_led_pin.GPIO_Speed=GPIO_Speed_Level_2;
	GPIO_Init(GPIOA,&gpio_led_pin);

	gpio_button_pin.GPIO_Pin=GPIO_Pin_13;
	gpio_button_pin.GPIO_Mode=GPIO_Mode_IN;
	gpio_button_pin.GPIO_OType=GPIO_OType_PP;
	gpio_button_pin.GPIO_PuPd=GPIO_PuPd_NOPULL;
	gpio_button_pin.GPIO_Speed=GPIO_Speed_Level_2;
	GPIO_Init(GPIOC,&gpio_button_pin);

	/*Interrupt configuration for the button*/
	/*1. System configuration for exti line*/
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC,EXTI_PinSource13);
	/*2. EXTI line configuration 13, falling edge, interrupt mode*/
	EXTI_InitTypeDef exti_init;
	exti_init.EXTI_Line=EXTI_Line13;
	exti_init.EXTI_Mode=EXTI_Mode_Interrupt;
	exti_init.EXTI_Trigger=EXTI_Trigger_Falling;
	exti_init.EXTI_LineCmd=ENABLE;
	EXTI_Init(&exti_init);
	/*3. NVIC settings (IRQ settings for the selected EXTI line)*/
	NVIC_SetPriority(EXTI15_10_IRQn,5);
	NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void EXTI15_10_IRQHandler(void)
{
	traceISR_ENTER();
	/*1. Clear the interrupt pending bit of the EXTI line*/
	EXTI_ClearITPendingBit(EXTI_Line13);
	button_handler(NULL);
	traceISR_EXIT();
}
